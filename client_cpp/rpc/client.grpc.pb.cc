// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: client.proto

#include "client.pb.h"
#include "client.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace rpc {

static const char* Greeter_method_names[] = {
  "/rpc.Greeter/WritePoints",
  "/rpc.Greeter/QuerySeries",
  "/rpc.Greeter/Config",
  "/rpc.Greeter/QueryRange",
  "/rpc.Greeter/QueryTagValues",
  "/rpc.Greeter/QueryNewPoint",
};

std::unique_ptr< Greeter::Stub> Greeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Greeter::Stub> stub(new Greeter::Stub(channel, options));
  return stub;
}

Greeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_WritePoints_(Greeter_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QuerySeries_(Greeter_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Config_(Greeter_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryRange_(Greeter_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryTagValues_(Greeter_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryNewPoint_(Greeter_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Greeter::Stub::WritePoints(::grpc::ClientContext* context, const ::rpc::WritePointsRequest& request, ::rpc::WritePointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::WritePointsRequest, ::rpc::WritePointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WritePoints_, context, request, response);
}

void Greeter::Stub::async::WritePoints(::grpc::ClientContext* context, const ::rpc::WritePointsRequest* request, ::rpc::WritePointsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::WritePointsRequest, ::rpc::WritePointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WritePoints_, context, request, response, std::move(f));
}

void Greeter::Stub::async::WritePoints(::grpc::ClientContext* context, const ::rpc::WritePointsRequest* request, ::rpc::WritePointsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WritePoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::WritePointsResponse>* Greeter::Stub::PrepareAsyncWritePointsRaw(::grpc::ClientContext* context, const ::rpc::WritePointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::WritePointsResponse, ::rpc::WritePointsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WritePoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::WritePointsResponse>* Greeter::Stub::AsyncWritePointsRaw(::grpc::ClientContext* context, const ::rpc::WritePointsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWritePointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::QuerySeries(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest& request, ::rpc::QuerySeriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::QuerySeriesRequest, ::rpc::QuerySeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QuerySeries_, context, request, response);
}

void Greeter::Stub::async::QuerySeries(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest* request, ::rpc::QuerySeriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::QuerySeriesRequest, ::rpc::QuerySeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QuerySeries_, context, request, response, std::move(f));
}

void Greeter::Stub::async::QuerySeries(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest* request, ::rpc::QuerySeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QuerySeries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::QuerySeriesResponse>* Greeter::Stub::PrepareAsyncQuerySeriesRaw(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::QuerySeriesResponse, ::rpc::QuerySeriesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QuerySeries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::QuerySeriesResponse>* Greeter::Stub::AsyncQuerySeriesRaw(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQuerySeriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::Config(::grpc::ClientContext* context, const ::rpc::ConfigRequest& request, ::rpc::ConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::ConfigRequest, ::rpc::ConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Config_, context, request, response);
}

void Greeter::Stub::async::Config(::grpc::ClientContext* context, const ::rpc::ConfigRequest* request, ::rpc::ConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::ConfigRequest, ::rpc::ConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Config_, context, request, response, std::move(f));
}

void Greeter::Stub::async::Config(::grpc::ClientContext* context, const ::rpc::ConfigRequest* request, ::rpc::ConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Config_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::ConfigResponse>* Greeter::Stub::PrepareAsyncConfigRaw(::grpc::ClientContext* context, const ::rpc::ConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::ConfigResponse, ::rpc::ConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Config_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::ConfigResponse>* Greeter::Stub::AsyncConfigRaw(::grpc::ClientContext* context, const ::rpc::ConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::QueryRange(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest& request, ::rpc::QueryRangeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::QueryRangeRequest, ::rpc::QueryRangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryRange_, context, request, response);
}

void Greeter::Stub::async::QueryRange(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest* request, ::rpc::QueryRangeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::QueryRangeRequest, ::rpc::QueryRangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryRange_, context, request, response, std::move(f));
}

void Greeter::Stub::async::QueryRange(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest* request, ::rpc::QueryRangeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryRange_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::QueryRangeResponse>* Greeter::Stub::PrepareAsyncQueryRangeRaw(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::QueryRangeResponse, ::rpc::QueryRangeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryRange_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::QueryRangeResponse>* Greeter::Stub::AsyncQueryRangeRaw(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryRangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::QueryTagValues(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest& request, ::rpc::QueryTagValuesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::QueryTagValuesRequest, ::rpc::QueryTagValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryTagValues_, context, request, response);
}

void Greeter::Stub::async::QueryTagValues(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest* request, ::rpc::QueryTagValuesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::QueryTagValuesRequest, ::rpc::QueryTagValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryTagValues_, context, request, response, std::move(f));
}

void Greeter::Stub::async::QueryTagValues(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest* request, ::rpc::QueryTagValuesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryTagValues_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::QueryTagValuesResponse>* Greeter::Stub::PrepareAsyncQueryTagValuesRaw(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::QueryTagValuesResponse, ::rpc::QueryTagValuesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryTagValues_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::QueryTagValuesResponse>* Greeter::Stub::AsyncQueryTagValuesRaw(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryTagValuesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::QueryNewPoint(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest& request, ::rpc::QueryNewPointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::QueryNewPointRequest, ::rpc::QueryNewPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryNewPoint_, context, request, response);
}

void Greeter::Stub::async::QueryNewPoint(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest* request, ::rpc::QueryNewPointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::QueryNewPointRequest, ::rpc::QueryNewPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryNewPoint_, context, request, response, std::move(f));
}

void Greeter::Stub::async::QueryNewPoint(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest* request, ::rpc::QueryNewPointResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryNewPoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::QueryNewPointResponse>* Greeter::Stub::PrepareAsyncQueryNewPointRaw(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::QueryNewPointResponse, ::rpc::QueryNewPointRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryNewPoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::QueryNewPointResponse>* Greeter::Stub::AsyncQueryNewPointRaw(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryNewPointRaw(context, request, cq);
  result->StartCall();
  return result;
}

Greeter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::rpc::WritePointsRequest, ::rpc::WritePointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::WritePointsRequest* req,
             ::rpc::WritePointsResponse* resp) {
               return service->WritePoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::rpc::QuerySeriesRequest, ::rpc::QuerySeriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::QuerySeriesRequest* req,
             ::rpc::QuerySeriesResponse* resp) {
               return service->QuerySeries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::rpc::ConfigRequest, ::rpc::ConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::ConfigRequest* req,
             ::rpc::ConfigResponse* resp) {
               return service->Config(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::rpc::QueryRangeRequest, ::rpc::QueryRangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::QueryRangeRequest* req,
             ::rpc::QueryRangeResponse* resp) {
               return service->QueryRange(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::rpc::QueryTagValuesRequest, ::rpc::QueryTagValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::QueryTagValuesRequest* req,
             ::rpc::QueryTagValuesResponse* resp) {
               return service->QueryTagValues(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::rpc::QueryNewPointRequest, ::rpc::QueryNewPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::QueryNewPointRequest* req,
             ::rpc::QueryNewPointResponse* resp) {
               return service->QueryNewPoint(ctx, req, resp);
             }, this)));
}

Greeter::Service::~Service() {
}

::grpc::Status Greeter::Service::WritePoints(::grpc::ServerContext* context, const ::rpc::WritePointsRequest* request, ::rpc::WritePointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::QuerySeries(::grpc::ServerContext* context, const ::rpc::QuerySeriesRequest* request, ::rpc::QuerySeriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Config(::grpc::ServerContext* context, const ::rpc::ConfigRequest* request, ::rpc::ConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::QueryRange(::grpc::ServerContext* context, const ::rpc::QueryRangeRequest* request, ::rpc::QueryRangeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::QueryTagValues(::grpc::ServerContext* context, const ::rpc::QueryTagValuesRequest* request, ::rpc::QueryTagValuesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::QueryNewPoint(::grpc::ServerContext* context, const ::rpc::QueryNewPointRequest* request, ::rpc::QueryNewPointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rpc

