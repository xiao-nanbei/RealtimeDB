// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: client.proto
#ifndef GRPC_client_2eproto__INCLUDED
#define GRPC_client_2eproto__INCLUDED

#include "client.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace rpc {

// 定义服务
class Greeter final {
 public:
  static constexpr char const* service_full_name() {
    return "rpc.Greeter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status WritePoints(::grpc::ClientContext* context, const ::rpc::WritePointsRequest& request, ::rpc::WritePointsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::WritePointsResponse>> AsyncWritePoints(::grpc::ClientContext* context, const ::rpc::WritePointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::WritePointsResponse>>(AsyncWritePointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::WritePointsResponse>> PrepareAsyncWritePoints(::grpc::ClientContext* context, const ::rpc::WritePointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::WritePointsResponse>>(PrepareAsyncWritePointsRaw(context, request, cq));
    }
    virtual ::grpc::Status QuerySeries(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest& request, ::rpc::QuerySeriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QuerySeriesResponse>> AsyncQuerySeries(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QuerySeriesResponse>>(AsyncQuerySeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QuerySeriesResponse>> PrepareAsyncQuerySeries(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QuerySeriesResponse>>(PrepareAsyncQuerySeriesRaw(context, request, cq));
    }
    virtual ::grpc::Status Config(::grpc::ClientContext* context, const ::rpc::ConfigRequest& request, ::rpc::ConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ConfigResponse>> AsyncConfig(::grpc::ClientContext* context, const ::rpc::ConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ConfigResponse>>(AsyncConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ConfigResponse>> PrepareAsyncConfig(::grpc::ClientContext* context, const ::rpc::ConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ConfigResponse>>(PrepareAsyncConfigRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryRange(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest& request, ::rpc::QueryRangeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryRangeResponse>> AsyncQueryRange(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryRangeResponse>>(AsyncQueryRangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryRangeResponse>> PrepareAsyncQueryRange(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryRangeResponse>>(PrepareAsyncQueryRangeRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryTagValues(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest& request, ::rpc::QueryTagValuesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryTagValuesResponse>> AsyncQueryTagValues(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryTagValuesResponse>>(AsyncQueryTagValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryTagValuesResponse>> PrepareAsyncQueryTagValues(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryTagValuesResponse>>(PrepareAsyncQueryTagValuesRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryNewPoint(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest& request, ::rpc::QueryNewPointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryNewPointResponse>> AsyncQueryNewPoint(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryNewPointResponse>>(AsyncQueryNewPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryNewPointResponse>> PrepareAsyncQueryNewPoint(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryNewPointResponse>>(PrepareAsyncQueryNewPointRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void WritePoints(::grpc::ClientContext* context, const ::rpc::WritePointsRequest* request, ::rpc::WritePointsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WritePoints(::grpc::ClientContext* context, const ::rpc::WritePointsRequest* request, ::rpc::WritePointsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QuerySeries(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest* request, ::rpc::QuerySeriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QuerySeries(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest* request, ::rpc::QuerySeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Config(::grpc::ClientContext* context, const ::rpc::ConfigRequest* request, ::rpc::ConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Config(::grpc::ClientContext* context, const ::rpc::ConfigRequest* request, ::rpc::ConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryRange(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest* request, ::rpc::QueryRangeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryRange(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest* request, ::rpc::QueryRangeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryTagValues(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest* request, ::rpc::QueryTagValuesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryTagValues(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest* request, ::rpc::QueryTagValuesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryNewPoint(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest* request, ::rpc::QueryNewPointResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryNewPoint(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest* request, ::rpc::QueryNewPointResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::WritePointsResponse>* AsyncWritePointsRaw(::grpc::ClientContext* context, const ::rpc::WritePointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::WritePointsResponse>* PrepareAsyncWritePointsRaw(::grpc::ClientContext* context, const ::rpc::WritePointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QuerySeriesResponse>* AsyncQuerySeriesRaw(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QuerySeriesResponse>* PrepareAsyncQuerySeriesRaw(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ConfigResponse>* AsyncConfigRaw(::grpc::ClientContext* context, const ::rpc::ConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ConfigResponse>* PrepareAsyncConfigRaw(::grpc::ClientContext* context, const ::rpc::ConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryRangeResponse>* AsyncQueryRangeRaw(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryRangeResponse>* PrepareAsyncQueryRangeRaw(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryTagValuesResponse>* AsyncQueryTagValuesRaw(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryTagValuesResponse>* PrepareAsyncQueryTagValuesRaw(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryNewPointResponse>* AsyncQueryNewPointRaw(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::QueryNewPointResponse>* PrepareAsyncQueryNewPointRaw(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status WritePoints(::grpc::ClientContext* context, const ::rpc::WritePointsRequest& request, ::rpc::WritePointsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::WritePointsResponse>> AsyncWritePoints(::grpc::ClientContext* context, const ::rpc::WritePointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::WritePointsResponse>>(AsyncWritePointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::WritePointsResponse>> PrepareAsyncWritePoints(::grpc::ClientContext* context, const ::rpc::WritePointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::WritePointsResponse>>(PrepareAsyncWritePointsRaw(context, request, cq));
    }
    ::grpc::Status QuerySeries(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest& request, ::rpc::QuerySeriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::QuerySeriesResponse>> AsyncQuerySeries(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::QuerySeriesResponse>>(AsyncQuerySeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::QuerySeriesResponse>> PrepareAsyncQuerySeries(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::QuerySeriesResponse>>(PrepareAsyncQuerySeriesRaw(context, request, cq));
    }
    ::grpc::Status Config(::grpc::ClientContext* context, const ::rpc::ConfigRequest& request, ::rpc::ConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ConfigResponse>> AsyncConfig(::grpc::ClientContext* context, const ::rpc::ConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ConfigResponse>>(AsyncConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ConfigResponse>> PrepareAsyncConfig(::grpc::ClientContext* context, const ::rpc::ConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ConfigResponse>>(PrepareAsyncConfigRaw(context, request, cq));
    }
    ::grpc::Status QueryRange(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest& request, ::rpc::QueryRangeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::QueryRangeResponse>> AsyncQueryRange(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::QueryRangeResponse>>(AsyncQueryRangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::QueryRangeResponse>> PrepareAsyncQueryRange(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::QueryRangeResponse>>(PrepareAsyncQueryRangeRaw(context, request, cq));
    }
    ::grpc::Status QueryTagValues(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest& request, ::rpc::QueryTagValuesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::QueryTagValuesResponse>> AsyncQueryTagValues(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::QueryTagValuesResponse>>(AsyncQueryTagValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::QueryTagValuesResponse>> PrepareAsyncQueryTagValues(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::QueryTagValuesResponse>>(PrepareAsyncQueryTagValuesRaw(context, request, cq));
    }
    ::grpc::Status QueryNewPoint(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest& request, ::rpc::QueryNewPointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::QueryNewPointResponse>> AsyncQueryNewPoint(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::QueryNewPointResponse>>(AsyncQueryNewPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::QueryNewPointResponse>> PrepareAsyncQueryNewPoint(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::QueryNewPointResponse>>(PrepareAsyncQueryNewPointRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void WritePoints(::grpc::ClientContext* context, const ::rpc::WritePointsRequest* request, ::rpc::WritePointsResponse* response, std::function<void(::grpc::Status)>) override;
      void WritePoints(::grpc::ClientContext* context, const ::rpc::WritePointsRequest* request, ::rpc::WritePointsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QuerySeries(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest* request, ::rpc::QuerySeriesResponse* response, std::function<void(::grpc::Status)>) override;
      void QuerySeries(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest* request, ::rpc::QuerySeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Config(::grpc::ClientContext* context, const ::rpc::ConfigRequest* request, ::rpc::ConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void Config(::grpc::ClientContext* context, const ::rpc::ConfigRequest* request, ::rpc::ConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryRange(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest* request, ::rpc::QueryRangeResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryRange(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest* request, ::rpc::QueryRangeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryTagValues(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest* request, ::rpc::QueryTagValuesResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryTagValues(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest* request, ::rpc::QueryTagValuesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryNewPoint(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest* request, ::rpc::QueryNewPointResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryNewPoint(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest* request, ::rpc::QueryNewPointResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rpc::WritePointsResponse>* AsyncWritePointsRaw(::grpc::ClientContext* context, const ::rpc::WritePointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::WritePointsResponse>* PrepareAsyncWritePointsRaw(::grpc::ClientContext* context, const ::rpc::WritePointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::QuerySeriesResponse>* AsyncQuerySeriesRaw(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::QuerySeriesResponse>* PrepareAsyncQuerySeriesRaw(::grpc::ClientContext* context, const ::rpc::QuerySeriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::ConfigResponse>* AsyncConfigRaw(::grpc::ClientContext* context, const ::rpc::ConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::ConfigResponse>* PrepareAsyncConfigRaw(::grpc::ClientContext* context, const ::rpc::ConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::QueryRangeResponse>* AsyncQueryRangeRaw(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::QueryRangeResponse>* PrepareAsyncQueryRangeRaw(::grpc::ClientContext* context, const ::rpc::QueryRangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::QueryTagValuesResponse>* AsyncQueryTagValuesRaw(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::QueryTagValuesResponse>* PrepareAsyncQueryTagValuesRaw(::grpc::ClientContext* context, const ::rpc::QueryTagValuesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::QueryNewPointResponse>* AsyncQueryNewPointRaw(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::QueryNewPointResponse>* PrepareAsyncQueryNewPointRaw(::grpc::ClientContext* context, const ::rpc::QueryNewPointRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_WritePoints_;
    const ::grpc::internal::RpcMethod rpcmethod_QuerySeries_;
    const ::grpc::internal::RpcMethod rpcmethod_Config_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryRange_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryTagValues_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryNewPoint_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status WritePoints(::grpc::ServerContext* context, const ::rpc::WritePointsRequest* request, ::rpc::WritePointsResponse* response);
    virtual ::grpc::Status QuerySeries(::grpc::ServerContext* context, const ::rpc::QuerySeriesRequest* request, ::rpc::QuerySeriesResponse* response);
    virtual ::grpc::Status Config(::grpc::ServerContext* context, const ::rpc::ConfigRequest* request, ::rpc::ConfigResponse* response);
    virtual ::grpc::Status QueryRange(::grpc::ServerContext* context, const ::rpc::QueryRangeRequest* request, ::rpc::QueryRangeResponse* response);
    virtual ::grpc::Status QueryTagValues(::grpc::ServerContext* context, const ::rpc::QueryTagValuesRequest* request, ::rpc::QueryTagValuesResponse* response);
    virtual ::grpc::Status QueryNewPoint(::grpc::ServerContext* context, const ::rpc::QueryNewPointRequest* request, ::rpc::QueryNewPointResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_WritePoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WritePoints() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_WritePoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePoints(::grpc::ServerContext* /*context*/, const ::rpc::WritePointsRequest* /*request*/, ::rpc::WritePointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWritePoints(::grpc::ServerContext* context, ::rpc::WritePointsRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::WritePointsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QuerySeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QuerySeries() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_QuerySeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuerySeries(::grpc::ServerContext* /*context*/, const ::rpc::QuerySeriesRequest* /*request*/, ::rpc::QuerySeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuerySeries(::grpc::ServerContext* context, ::rpc::QuerySeriesRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::QuerySeriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Config() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Config(::grpc::ServerContext* /*context*/, const ::rpc::ConfigRequest* /*request*/, ::rpc::ConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfig(::grpc::ServerContext* context, ::rpc::ConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::ConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryRange() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_QueryRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryRange(::grpc::ServerContext* /*context*/, const ::rpc::QueryRangeRequest* /*request*/, ::rpc::QueryRangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryRange(::grpc::ServerContext* context, ::rpc::QueryRangeRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::QueryRangeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryTagValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryTagValues() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_QueryTagValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryTagValues(::grpc::ServerContext* /*context*/, const ::rpc::QueryTagValuesRequest* /*request*/, ::rpc::QueryTagValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryTagValues(::grpc::ServerContext* context, ::rpc::QueryTagValuesRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::QueryTagValuesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryNewPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryNewPoint() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_QueryNewPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryNewPoint(::grpc::ServerContext* /*context*/, const ::rpc::QueryNewPointRequest* /*request*/, ::rpc::QueryNewPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryNewPoint(::grpc::ServerContext* context, ::rpc::QueryNewPointRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::QueryNewPointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_WritePoints<WithAsyncMethod_QuerySeries<WithAsyncMethod_Config<WithAsyncMethod_QueryRange<WithAsyncMethod_QueryTagValues<WithAsyncMethod_QueryNewPoint<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_WritePoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WritePoints() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::WritePointsRequest, ::rpc::WritePointsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::WritePointsRequest* request, ::rpc::WritePointsResponse* response) { return this->WritePoints(context, request, response); }));}
    void SetMessageAllocatorFor_WritePoints(
        ::grpc::MessageAllocator< ::rpc::WritePointsRequest, ::rpc::WritePointsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::WritePointsRequest, ::rpc::WritePointsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WritePoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePoints(::grpc::ServerContext* /*context*/, const ::rpc::WritePointsRequest* /*request*/, ::rpc::WritePointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WritePoints(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::WritePointsRequest* /*request*/, ::rpc::WritePointsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QuerySeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QuerySeries() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::QuerySeriesRequest, ::rpc::QuerySeriesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::QuerySeriesRequest* request, ::rpc::QuerySeriesResponse* response) { return this->QuerySeries(context, request, response); }));}
    void SetMessageAllocatorFor_QuerySeries(
        ::grpc::MessageAllocator< ::rpc::QuerySeriesRequest, ::rpc::QuerySeriesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::QuerySeriesRequest, ::rpc::QuerySeriesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QuerySeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuerySeries(::grpc::ServerContext* /*context*/, const ::rpc::QuerySeriesRequest* /*request*/, ::rpc::QuerySeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QuerySeries(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::QuerySeriesRequest* /*request*/, ::rpc::QuerySeriesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Config() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::ConfigRequest, ::rpc::ConfigResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::ConfigRequest* request, ::rpc::ConfigResponse* response) { return this->Config(context, request, response); }));}
    void SetMessageAllocatorFor_Config(
        ::grpc::MessageAllocator< ::rpc::ConfigRequest, ::rpc::ConfigResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::ConfigRequest, ::rpc::ConfigResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Config(::grpc::ServerContext* /*context*/, const ::rpc::ConfigRequest* /*request*/, ::rpc::ConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Config(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::ConfigRequest* /*request*/, ::rpc::ConfigResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryRange() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::QueryRangeRequest, ::rpc::QueryRangeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::QueryRangeRequest* request, ::rpc::QueryRangeResponse* response) { return this->QueryRange(context, request, response); }));}
    void SetMessageAllocatorFor_QueryRange(
        ::grpc::MessageAllocator< ::rpc::QueryRangeRequest, ::rpc::QueryRangeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::QueryRangeRequest, ::rpc::QueryRangeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryRange(::grpc::ServerContext* /*context*/, const ::rpc::QueryRangeRequest* /*request*/, ::rpc::QueryRangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryRange(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::QueryRangeRequest* /*request*/, ::rpc::QueryRangeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryTagValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryTagValues() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::QueryTagValuesRequest, ::rpc::QueryTagValuesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::QueryTagValuesRequest* request, ::rpc::QueryTagValuesResponse* response) { return this->QueryTagValues(context, request, response); }));}
    void SetMessageAllocatorFor_QueryTagValues(
        ::grpc::MessageAllocator< ::rpc::QueryTagValuesRequest, ::rpc::QueryTagValuesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::QueryTagValuesRequest, ::rpc::QueryTagValuesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryTagValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryTagValues(::grpc::ServerContext* /*context*/, const ::rpc::QueryTagValuesRequest* /*request*/, ::rpc::QueryTagValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryTagValues(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::QueryTagValuesRequest* /*request*/, ::rpc::QueryTagValuesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryNewPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryNewPoint() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::QueryNewPointRequest, ::rpc::QueryNewPointResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::QueryNewPointRequest* request, ::rpc::QueryNewPointResponse* response) { return this->QueryNewPoint(context, request, response); }));}
    void SetMessageAllocatorFor_QueryNewPoint(
        ::grpc::MessageAllocator< ::rpc::QueryNewPointRequest, ::rpc::QueryNewPointResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::QueryNewPointRequest, ::rpc::QueryNewPointResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryNewPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryNewPoint(::grpc::ServerContext* /*context*/, const ::rpc::QueryNewPointRequest* /*request*/, ::rpc::QueryNewPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryNewPoint(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::QueryNewPointRequest* /*request*/, ::rpc::QueryNewPointResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_WritePoints<WithCallbackMethod_QuerySeries<WithCallbackMethod_Config<WithCallbackMethod_QueryRange<WithCallbackMethod_QueryTagValues<WithCallbackMethod_QueryNewPoint<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_WritePoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WritePoints() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_WritePoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePoints(::grpc::ServerContext* /*context*/, const ::rpc::WritePointsRequest* /*request*/, ::rpc::WritePointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QuerySeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QuerySeries() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_QuerySeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuerySeries(::grpc::ServerContext* /*context*/, const ::rpc::QuerySeriesRequest* /*request*/, ::rpc::QuerySeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Config() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Config(::grpc::ServerContext* /*context*/, const ::rpc::ConfigRequest* /*request*/, ::rpc::ConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryRange() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_QueryRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryRange(::grpc::ServerContext* /*context*/, const ::rpc::QueryRangeRequest* /*request*/, ::rpc::QueryRangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryTagValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryTagValues() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_QueryTagValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryTagValues(::grpc::ServerContext* /*context*/, const ::rpc::QueryTagValuesRequest* /*request*/, ::rpc::QueryTagValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryNewPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryNewPoint() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_QueryNewPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryNewPoint(::grpc::ServerContext* /*context*/, const ::rpc::QueryNewPointRequest* /*request*/, ::rpc::QueryNewPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_WritePoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WritePoints() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_WritePoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePoints(::grpc::ServerContext* /*context*/, const ::rpc::WritePointsRequest* /*request*/, ::rpc::WritePointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWritePoints(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QuerySeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QuerySeries() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_QuerySeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuerySeries(::grpc::ServerContext* /*context*/, const ::rpc::QuerySeriesRequest* /*request*/, ::rpc::QuerySeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuerySeries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Config() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Config(::grpc::ServerContext* /*context*/, const ::rpc::ConfigRequest* /*request*/, ::rpc::ConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryRange() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_QueryRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryRange(::grpc::ServerContext* /*context*/, const ::rpc::QueryRangeRequest* /*request*/, ::rpc::QueryRangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryRange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryTagValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryTagValues() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_QueryTagValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryTagValues(::grpc::ServerContext* /*context*/, const ::rpc::QueryTagValuesRequest* /*request*/, ::rpc::QueryTagValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryTagValues(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryNewPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryNewPoint() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_QueryNewPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryNewPoint(::grpc::ServerContext* /*context*/, const ::rpc::QueryNewPointRequest* /*request*/, ::rpc::QueryNewPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryNewPoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WritePoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WritePoints() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WritePoints(context, request, response); }));
    }
    ~WithRawCallbackMethod_WritePoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePoints(::grpc::ServerContext* /*context*/, const ::rpc::WritePointsRequest* /*request*/, ::rpc::WritePointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WritePoints(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QuerySeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QuerySeries() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QuerySeries(context, request, response); }));
    }
    ~WithRawCallbackMethod_QuerySeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuerySeries(::grpc::ServerContext* /*context*/, const ::rpc::QuerySeriesRequest* /*request*/, ::rpc::QuerySeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QuerySeries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Config() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Config(context, request, response); }));
    }
    ~WithRawCallbackMethod_Config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Config(::grpc::ServerContext* /*context*/, const ::rpc::ConfigRequest* /*request*/, ::rpc::ConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Config(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryRange() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryRange(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryRange(::grpc::ServerContext* /*context*/, const ::rpc::QueryRangeRequest* /*request*/, ::rpc::QueryRangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryRange(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryTagValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryTagValues() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryTagValues(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryTagValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryTagValues(::grpc::ServerContext* /*context*/, const ::rpc::QueryTagValuesRequest* /*request*/, ::rpc::QueryTagValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryTagValues(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryNewPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryNewPoint() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryNewPoint(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryNewPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryNewPoint(::grpc::ServerContext* /*context*/, const ::rpc::QueryNewPointRequest* /*request*/, ::rpc::QueryNewPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryNewPoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WritePoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WritePoints() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::WritePointsRequest, ::rpc::WritePointsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::WritePointsRequest, ::rpc::WritePointsResponse>* streamer) {
                       return this->StreamedWritePoints(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WritePoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WritePoints(::grpc::ServerContext* /*context*/, const ::rpc::WritePointsRequest* /*request*/, ::rpc::WritePointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWritePoints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::WritePointsRequest,::rpc::WritePointsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QuerySeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QuerySeries() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::QuerySeriesRequest, ::rpc::QuerySeriesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::QuerySeriesRequest, ::rpc::QuerySeriesResponse>* streamer) {
                       return this->StreamedQuerySeries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QuerySeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QuerySeries(::grpc::ServerContext* /*context*/, const ::rpc::QuerySeriesRequest* /*request*/, ::rpc::QuerySeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuerySeries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::QuerySeriesRequest,::rpc::QuerySeriesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Config() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::ConfigRequest, ::rpc::ConfigResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::ConfigRequest, ::rpc::ConfigResponse>* streamer) {
                       return this->StreamedConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Config(::grpc::ServerContext* /*context*/, const ::rpc::ConfigRequest* /*request*/, ::rpc::ConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::ConfigRequest,::rpc::ConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryRange() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::QueryRangeRequest, ::rpc::QueryRangeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::QueryRangeRequest, ::rpc::QueryRangeResponse>* streamer) {
                       return this->StreamedQueryRange(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryRange(::grpc::ServerContext* /*context*/, const ::rpc::QueryRangeRequest* /*request*/, ::rpc::QueryRangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryRange(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::QueryRangeRequest,::rpc::QueryRangeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryTagValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryTagValues() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::QueryTagValuesRequest, ::rpc::QueryTagValuesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::QueryTagValuesRequest, ::rpc::QueryTagValuesResponse>* streamer) {
                       return this->StreamedQueryTagValues(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryTagValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryTagValues(::grpc::ServerContext* /*context*/, const ::rpc::QueryTagValuesRequest* /*request*/, ::rpc::QueryTagValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryTagValues(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::QueryTagValuesRequest,::rpc::QueryTagValuesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryNewPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryNewPoint() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::QueryNewPointRequest, ::rpc::QueryNewPointResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::QueryNewPointRequest, ::rpc::QueryNewPointResponse>* streamer) {
                       return this->StreamedQueryNewPoint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryNewPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryNewPoint(::grpc::ServerContext* /*context*/, const ::rpc::QueryNewPointRequest* /*request*/, ::rpc::QueryNewPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryNewPoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::QueryNewPointRequest,::rpc::QueryNewPointResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_WritePoints<WithStreamedUnaryMethod_QuerySeries<WithStreamedUnaryMethod_Config<WithStreamedUnaryMethod_QueryRange<WithStreamedUnaryMethod_QueryTagValues<WithStreamedUnaryMethod_QueryNewPoint<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_WritePoints<WithStreamedUnaryMethod_QuerySeries<WithStreamedUnaryMethod_Config<WithStreamedUnaryMethod_QueryRange<WithStreamedUnaryMethod_QueryTagValues<WithStreamedUnaryMethod_QueryNewPoint<Service > > > > > > StreamedService;
};

}  // namespace rpc


#endif  // GRPC_client_2eproto__INCLUDED
